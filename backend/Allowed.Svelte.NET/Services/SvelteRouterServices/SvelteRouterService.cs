using System.Text;
using Allowed.Svelte.NET.Attributes;
using Allowed.Svelte.NET.Models;
using Allowed.Svelte.NET.Options;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Options;

namespace Allowed.Svelte.NET.Services.SvelteRouterServices;

public class SvelteRouterService : ISvelteRouterService
{
    private readonly IWebHostEnvironment _environment;
    private readonly SvelteRouterOptions _options;

    public SvelteRouterService(IWebHostEnvironment environment, IOptions<SvelteRouterOptions> options)
    {
        _environment = environment;
        _options = options.Value;
    }

    private static string GetComponentName(string path)
    {
        return path.Split("/").Last().Replace(".svelte", "");
    }

    public async Task BuildRouter()
    {
        var importBuilder = new StringBuilder();
        var routesBuilder = new StringBuilder();
        var resultBuilder = new StringBuilder();

        var methods = AppDomain.CurrentDomain.GetAssemblies()
            .SelectMany(x => x.GetTypes())
            .Where(x => x.IsClass)
            .SelectMany(t => t.GetMethods())
            .Where(m => m.GetCustomAttributes(typeof(SvelteRouteAttribute), false).Length > 0)
            .ToArray();

        var routes = new List<RouteData>();

        foreach (var method in methods)
        {
            var attributes = method.GetCustomAttributes(typeof(SvelteRouteAttribute), false)
                .Cast<SvelteRouteAttribute>().ToArray();

            foreach (var attribute in attributes)
            {
                var page = attribute.Page;
                var template = attribute.Template;
                var layout = attribute.Layout;

                template = template.First() == '/' ? template : $"/{template}";
                template = template.Last() == '/' && template.Length != 1 ? template[..^1] : template;

                routes.Add(new RouteData
                {
                    Template = template,
                    Page = page.StartsWith("/") ? page : $"./{_options.PagesDirectory}/{page}.svelte",
                    Layout = string.IsNullOrEmpty(layout) || layout.StartsWith("/")
                        ? layout
                        : $"./{_options.LayoutsDirectory}/{layout}.svelte"
                });
            }
        }

        var importPath = routes.SelectMany(r => new[]
            {
                r.Page,
                r.Layout
            }).Where(r => !string.IsNullOrEmpty(r))
            .Cast<string>().Distinct().OrderBy(p => p).ToList();

        var imports = new Dictionary<string, string>();

        var lastPage = "";
        var counter = 2;

        foreach (var path in importPath)
        {
            var pageName = GetComponentName(path);
            if (pageName == lastPage)
            {
                imports.Add(path, $"{pageName}{counter}");
                counter++;
            }
            else
            {
                imports.Add(path, pageName);
                lastPage = pageName;
                counter = 2;
            }
        }

        foreach (var (path, name) in imports)
            importBuilder.AppendLine($"import {name} from '{path}';");

        importBuilder.AppendLine("import {RouteData} from '@dev/svelte-dotnet';");

        foreach (var route in routes)
        {
            var layoutPart = string.IsNullOrEmpty(route.Layout) ? "" : $", {imports[route.Layout]}";
            routesBuilder.AppendLine($"    '{route.Template}': new RouteData({imports[route.Page]}{layoutPart}),");
        }

        var routerPath = Path.Combine(_environment.ContentRootPath, _options.RouterPath);

        var importString = importBuilder.ToString();
        var routesString = routesBuilder.ToString();

        resultBuilder.AppendLine("// <auto-generated />");
        resultBuilder.AppendLine(importString);
        resultBuilder.AppendLine("export const routes = {");
        resultBuilder.AppendLine(routesString[..^3]);
        resultBuilder.AppendLine("}");

        var resultString = resultBuilder.ToString()[..^2];
        await File.WriteAllTextAsync(routerPath, resultString);
    }
}